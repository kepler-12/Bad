<?php

namespace Kepler12\Bad;

/**
*  Search
*
*  Use this section to define what this class is doing, the PHPDocumentator will use this
*  to automatically generate an API documentation using this information.
*
*  @author yourname
*/
class Search{

   /**  @var Gaol $goal the class Goal to be met */
   private $goal;

   /**  @var array $rules an array of class Rules */
   private $rules;

    /**
    * Options here.
    *
    *
    */

    /**  @var boolean $depth_first run depth before breadth*/
   public $depth_first = true;

   /**  @var integer $min_rules the minimum number of rules that must be run*/
   public $min_rules = 1;


  /**
  * Constructor
  *
  *
  * @param Goal $goal the goal which is trying to be achived by this search
  * @param array $rules an array of rule classes
  *
  * @return string
  */
   public function __construct($goal, $rules){
        $this->goal = $goal;
        $this->rules = $rules;
   }
    /**
    *  Run
    *
    * Run the search with the provided data.
    *
    * @param class $data A refrence to data
    * @param class $options overwrite defaults
    * @return Results $results
    */
   public function run($data, $options)
   {

        $min_rules = $options['min_rules'] ?? $this->min_rules;
        $depth_first = $options['depth_first'] ?? $this->depth_first;

        $results = self::collect_results($this->rules, $data);

        /* Set up the queue */
        $searchRules = [$this->rules];
        $searchResults = [$results];

        $variations = 0;
        $goalResult = false;
        /*
        * We act always act on the first item in the queue
        */
        while(count($searchResults) > 0)
        {
            $variations++;
            /* Validate the first item on the   queue */
            $goalResult = $this->goal::validate(new Result($searchRules[0], $searchResults[0], $data));

            if ($goalResult->success === true) {
                $goalResult->variations = $variations;
                break;
            }

            /* Set the results to work on */
            $shortenResult = $searchResults[0];
            $shortenRules = $searchRules[0];

            /* Remove items from the queue */
            array_shift($searchResults);
            array_shift($searchRules);

            if (count($shortenResult) > $min_rules) {
                /* Add One less rule To the queue
                * ie if you've run [A,B,C] it will add [A, B], [A, C], & [B, C] in that order
                */
                for ($index = count($shortenResult) - 1; $index >= 0;  $index--) {
                    /* Copy the reults to a new array */
                    $newResults = $shortenResult;
                    $newRules = $shortenRules;

                    /* Remove one of the results and rules from this queue */
                    array_splice($newResults, $index, 1);
                    array_splice($newRules, $index, 1);

                    /* Push/unshift to the queue */
                    if ($depth_first) {
                        //Depth first always shifts new items to the start of the queue
                        array_unshif($searchResults, $newResults);
                        array_unshif($searchRules, $newhRules);
                    } else {
                        //Breadth always pushes items to the end of the queue
                        array_push($searchResults, $newResults);
                        array_push($searchRules, $newRules);
                    }

                }
            }

        }
        if ($goalResult->success === true)
            return $goalResult;

        $failed = new Result(
            [], [], $data
        );
        $failed->variations = $variations;
        $failed->success = false;
        return $failed;
   }
    /**
    *  collect_results
    *
    * Returns an array of results for each rule
    *
    * @param array $rules a group of rules to pass on the data
    * @param mixed $data
    * @return array
    */
   public static function collect_results($rules, $data)
   {
        $results = [];
        foreach($rules as $rule) {
            $result = $rule::validate_data($data) ? $rule::run($data) : $data;

            array_push($results, $result);
        }
        return $results;
   }
}

